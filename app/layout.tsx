import "./theme.css";
import "@coinbase/onchainkit/styles.css";
import type { Metadata, Viewport } from "next";
import "./globals.css";
import '../styles/quantum.css';
import { Providers } from "./providers";
import ChunkLoadGuard from "./components/ChunkLoadGuard";

export const viewport: Viewport = {
  width: "device-width",
  initialScale: 1,
  viewportFit: "cover",
  themeColor: process.env.NEXT_PUBLIC_THEME_COLOR || "#0A0A0A",
};

export async function generateMetadata(): Promise<Metadata> {
  const baseUrl = process.env.NEXT_PUBLIC_URL || "https://localhost:3000";
  const NAME = process.env.NEXT_PUBLIC_ONCHAINKIT_PROJECT_NAME || "Mini App";
  const HERO = process.env.NEXT_PUBLIC_APP_HERO_IMAGE || "/icon.png";
  const SPLASH = process.env.NEXT_PUBLIC_APP_SPLASH_IMAGE || "/icon.png"; // synced with .env
  const SPLASH_BG =
    process.env.NEXT_PUBLIC_SPLASH_BACKGROUND_COLOR || "#0A0A0A";

  const absolute = (u?: string) =>
    u && u.startsWith("http") ? u : `${baseUrl.replace(/\/$/, "")}${u || ""}`;

  return {
    metadataBase: new URL(baseUrl),
    title: NAME,
    description:
      "Generated by `create-onchain --mini`, a Next.js template for MiniKit",
    openGraph: {
      type: "website",
      url: baseUrl,
      title: NAME,
      description:
        "Generated by `create-onchain --mini`, a Next.js template for MiniKit",
      images: [{ url: absolute(HERO) }],
    },
    twitter: {
      card: "summary_large_image",
      title: NAME,
      description:
        "Generated by `create-onchain --mini`, a Next.js template for MiniKit",
      images: [absolute(HERO)],
    },
    icons: {
      icon: "/icon.png",
      apple: "/apple-touch-icon.png",
    },
    other: {
      "fc:frame": JSON.stringify({
        version: "next",
        imageUrl: absolute(HERO),
        button: {
          title: `Launch ${NAME}`,
          action: {
            type: "launch_frame",
            name: NAME,
            url: baseUrl,
            splashImageUrl: absolute(SPLASH),
            splashBackgroundColor: SPLASH_BG,
          },
        },
      }),
    },
  };
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className="bg-background">
        <ChunkLoadGuard />
        <Providers>{children}</Providers>
      </body>
    </html>
  );
}